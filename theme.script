## Author : Osi Bluber
## Github : @OsiPog

// Screen size
screen.w = Window.GetWidth(0);
screen.h = Window.GetHeight(0);

// State
state.status = "normal";
state.go_normal_in = 0;

// Init images
for (i = 0; i < 89; i++)
  loop_image[i] = Image("colorful_loop/progress-" + i + ".png");
loop_sprite = Sprite();
loop_sprite.SetX(Window.GetX() + (screen.w / 2 - loop_image[0].GetWidth() / 2)); # Place images in the center
loop_sprite.SetY(Window.GetY() + (screen.h / 2 - loop_image[0].GetHeight() / 2));

for (i = 0; i < 48; i++)
  circle_alt_image[i] = Image("circle_alt/progress-" + i + ".png");
circle_alt_sprite = Sprite();
circle_alt_sprite.SetX(Window.GetX() + (screen.w / 2 - circle_alt_image[0].GetWidth() / 2)); # Place images in the center
circle_alt_sprite.SetY(Window.GetY() + (screen.h / 2 - circle_alt_image[0].GetHeight() / 2));

lock_sprite = Sprite();
for (i = 0; i < 37; i++)
  lock_locked_image[i] = Image("lock_locked/progress-" + i + ".png");
for (i = 0; i < 12; i++)
  lock_open_image[i] = Image("lock_open/progress-" + i + ".png");
lock_sprite.SetX(Window.GetX() + (screen.w / 2 - lock_locked_image[0].GetWidth() / 2)); # Place images in the center
lock_sprite.SetY(Window.GetY() + (screen.h / 2 - lock_locked_image[0].GetHeight() / 2));

loop_sprite.SetZ(1);
lock_sprite.SetZ(2);
circle_alt_sprite.SetZ(3);

t = 0;
index_lock_open = 0;
index_lock_locked = 0;
lock_has_played = 0;
lock_locked_has_played = 0;
loop_has_played = 0;
circle_alt_opacity = 0;
lock_opacity = 0;

fun ApplyVector(sprite, vx, vy) {
    x = sprite.GetX();
    y = sprite.GetY();
    sprite.SetX(x + Math.Int(vx));
    sprite.SetY(y + Math.Int(vy));
}

fun RefreshCallback ()
  {
    // // set normal delay
    if (state.go_normal_in > 0) {
      state.go_normal_in--;
    }
    if (state.go_normal_in == 0) {
      state.status = "normal";
    }

    index_loop = Math.Int(t / 1.75) % 89;
    index_circle = Math.Int(t / 2.4) % 48;

    if (Plymouth.GetMode() == "boot") {
        circle_alt_sprite.SetOpacity(circle_alt_opacity);
        lock_sprite.SetOpacity(lock_opacity);

        // Always play loop once at the start
        if (loop_has_played == 0) {
            loop_sprite.SetImage(loop_image[index_loop]);
            t++;
            if (index_loop >= 88) {
                loop_has_played = 1;
                loop_sprite.SetOpacity(0);
                t = 0;
            }
        }

        if ((loop_has_played == 1) && (state.status == "password")) {
            if (lock_opacity < 1) {
                lock_opacity += 0.05;
            }
            // static lock
            lock_sprite.SetImage(lock_open_image[0]);

            // on boot or when the password entry failed
            if (lock_locked_has_played == 0) {
                circle_alt_opacity = 0; // quick fix to hide loading circle
                index_lock_locked = Math.Int(t / 2) % 37;
                lock_sprite.SetImage(lock_locked_image[index_lock_locked]);

                t++;

                if (index_lock_locked >= 36) {
                    lock_locked_has_played = 1;
                    index_lock_locked = 0;
                    t = 0;
                }
            }
        }

        if ((loop_has_played == 1) && (state.status == "normal")) {
            // lock open animation
            if (lock_has_played == 0 ) {
                index_lock_open = Math.Int(t / 2.5) % 12;
                lock_sprite.SetImage(lock_open_image[index_lock_open]);

                if (index_lock_open > 10) {
                    lock_has_played = 1;
                    t = 0;
                }

                t++;
            }
            else {
                if (circle_alt_opacity < 1) {
                    circle_alt_opacity += 0.05;
                }
                circle_alt_sprite.SetImage(circle_alt_image[index_circle]);
                t++;
            }
        }

    }

    if (Plymouth.GetMode() == "shutdown") {
      circle_alt_sprite.SetImage(circle_alt_image[index_circle]);
      t++;
    }
  }

Plymouth.SetRefreshFunction(RefreshCallback);

//------------------------------------- Password prompt -------------------------------

fun DisplayPasswordCallback (prompt, bullets) {
    // normal state was triggered before but now interrupted
    if (state.go_normal_in > 0) {
      lock_locked_has_played = 0;
    }
    state.go_normal_in = -1;
    state.status = "password";
}

Plymouth.SetDisplayPasswordFunction(DisplayPasswordCallback);

//--------------------------- Normal display (unset all text) ----------------------
fun DisplayNormalCallback() {
    state.go_normal_in = 150;
}
Plymouth.SetDisplayNormalFunction(DisplayNormalCallback);

//----------------------------------------- Message --------------------------------
fun MessageCallback(text) {
    message.image = Image.Text(text, 1, 1, 1);
    message.sprite = Sprite(message.image);
    message.sprite.SetPosition(screen.half.w - message.image.GetWidth() / 2, message.image.GetHeight());
}
Plymouth.SetMessageFunction(MessageCallback);
